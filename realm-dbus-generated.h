/*
 * This file is generated by gdbus-codegen, do not modify it.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from. Note that it links to GLib, so must comply with the
 * LGPL linking clauses.
 */

#ifndef __REALM_DBUS_GENERATED_H__
#define __REALM_DBUS_GENERATED_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.realmd.Provider */

#define REALM_DBUS_TYPE_PROVIDER (realm_dbus_provider_get_type ())
#define REALM_DBUS_PROVIDER(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), REALM_DBUS_TYPE_PROVIDER, RealmDbusProvider))
#define REALM_DBUS_IS_PROVIDER(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), REALM_DBUS_TYPE_PROVIDER))
#define REALM_DBUS_PROVIDER_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), REALM_DBUS_TYPE_PROVIDER, RealmDbusProviderIface))

struct _RealmDbusProvider;
typedef struct _RealmDbusProvider RealmDbusProvider;
typedef struct _RealmDbusProviderIface RealmDbusProviderIface;

struct _RealmDbusProviderIface
{
  GTypeInterface parent_iface;


  gboolean (*handle_discover) (
    RealmDbusProvider *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_string,
    GVariant *arg_options);

  const gchar * (*get_name) (RealmDbusProvider *object);

  const gchar *const * (*get_realms) (RealmDbusProvider *object);

  const gchar * (*get_version) (RealmDbusProvider *object);

};

GType realm_dbus_provider_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *realm_dbus_provider_interface_info (void);
guint realm_dbus_provider_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void realm_dbus_provider_complete_discover (
    RealmDbusProvider *object,
    GDBusMethodInvocation *invocation,
    gint relevance,
    const gchar *const *realm);



/* D-Bus method calls: */
void realm_dbus_provider_call_discover (
    RealmDbusProvider *proxy,
    const gchar *arg_string,
    GVariant *arg_options,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean realm_dbus_provider_call_discover_finish (
    RealmDbusProvider *proxy,
    gint *out_relevance,
    gchar ***out_realm,
    GAsyncResult *res,
    GError **error);

gboolean realm_dbus_provider_call_discover_sync (
    RealmDbusProvider *proxy,
    const gchar *arg_string,
    GVariant *arg_options,
    gint *out_relevance,
    gchar ***out_realm,
    GCancellable *cancellable,
    GError **error);



/* D-Bus property accessors: */
const gchar *realm_dbus_provider_get_name (RealmDbusProvider *object);
gchar *realm_dbus_provider_dup_name (RealmDbusProvider *object);
void realm_dbus_provider_set_name (RealmDbusProvider *object, const gchar *value);

const gchar *realm_dbus_provider_get_version (RealmDbusProvider *object);
gchar *realm_dbus_provider_dup_version (RealmDbusProvider *object);
void realm_dbus_provider_set_version (RealmDbusProvider *object, const gchar *value);

const gchar *const *realm_dbus_provider_get_realms (RealmDbusProvider *object);
gchar **realm_dbus_provider_dup_realms (RealmDbusProvider *object);
void realm_dbus_provider_set_realms (RealmDbusProvider *object, const gchar *const *value);


/* ---- */

#define REALM_DBUS_TYPE_PROVIDER_PROXY (realm_dbus_provider_proxy_get_type ())
#define REALM_DBUS_PROVIDER_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), REALM_DBUS_TYPE_PROVIDER_PROXY, RealmDbusProviderProxy))
#define REALM_DBUS_PROVIDER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), REALM_DBUS_TYPE_PROVIDER_PROXY, RealmDbusProviderProxyClass))
#define REALM_DBUS_PROVIDER_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), REALM_DBUS_TYPE_PROVIDER_PROXY, RealmDbusProviderProxyClass))
#define REALM_DBUS_IS_PROVIDER_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), REALM_DBUS_TYPE_PROVIDER_PROXY))
#define REALM_DBUS_IS_PROVIDER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), REALM_DBUS_TYPE_PROVIDER_PROXY))

typedef struct _RealmDbusProviderProxy RealmDbusProviderProxy;
typedef struct _RealmDbusProviderProxyClass RealmDbusProviderProxyClass;
typedef struct _RealmDbusProviderProxyPrivate RealmDbusProviderProxyPrivate;

struct _RealmDbusProviderProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  RealmDbusProviderProxyPrivate *priv;
};

struct _RealmDbusProviderProxyClass
{
  GDBusProxyClass parent_class;
};

GType realm_dbus_provider_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (RealmDbusProviderProxy, g_object_unref)
#endif

void realm_dbus_provider_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
RealmDbusProvider *realm_dbus_provider_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
RealmDbusProvider *realm_dbus_provider_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void realm_dbus_provider_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
RealmDbusProvider *realm_dbus_provider_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
RealmDbusProvider *realm_dbus_provider_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define REALM_DBUS_TYPE_PROVIDER_SKELETON (realm_dbus_provider_skeleton_get_type ())
#define REALM_DBUS_PROVIDER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), REALM_DBUS_TYPE_PROVIDER_SKELETON, RealmDbusProviderSkeleton))
#define REALM_DBUS_PROVIDER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), REALM_DBUS_TYPE_PROVIDER_SKELETON, RealmDbusProviderSkeletonClass))
#define REALM_DBUS_PROVIDER_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), REALM_DBUS_TYPE_PROVIDER_SKELETON, RealmDbusProviderSkeletonClass))
#define REALM_DBUS_IS_PROVIDER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), REALM_DBUS_TYPE_PROVIDER_SKELETON))
#define REALM_DBUS_IS_PROVIDER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), REALM_DBUS_TYPE_PROVIDER_SKELETON))

typedef struct _RealmDbusProviderSkeleton RealmDbusProviderSkeleton;
typedef struct _RealmDbusProviderSkeletonClass RealmDbusProviderSkeletonClass;
typedef struct _RealmDbusProviderSkeletonPrivate RealmDbusProviderSkeletonPrivate;

struct _RealmDbusProviderSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  RealmDbusProviderSkeletonPrivate *priv;
};

struct _RealmDbusProviderSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType realm_dbus_provider_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (RealmDbusProviderSkeleton, g_object_unref)
#endif

RealmDbusProvider *realm_dbus_provider_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.realmd.Service */

#define REALM_DBUS_TYPE_SERVICE (realm_dbus_service_get_type ())
#define REALM_DBUS_SERVICE(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), REALM_DBUS_TYPE_SERVICE, RealmDbusService))
#define REALM_DBUS_IS_SERVICE(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), REALM_DBUS_TYPE_SERVICE))
#define REALM_DBUS_SERVICE_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), REALM_DBUS_TYPE_SERVICE, RealmDbusServiceIface))

struct _RealmDbusService;
typedef struct _RealmDbusService RealmDbusService;
typedef struct _RealmDbusServiceIface RealmDbusServiceIface;

struct _RealmDbusServiceIface
{
  GTypeInterface parent_iface;


  gboolean (*handle_cancel) (
    RealmDbusService *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_operation);

  gboolean (*handle_release) (
    RealmDbusService *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_set_locale) (
    RealmDbusService *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_locale);

  void (*diagnostics) (
    RealmDbusService *object,
    const gchar *arg_data,
    const gchar *arg_operation);

};

GType realm_dbus_service_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *realm_dbus_service_interface_info (void);
guint realm_dbus_service_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void realm_dbus_service_complete_cancel (
    RealmDbusService *object,
    GDBusMethodInvocation *invocation);

void realm_dbus_service_complete_set_locale (
    RealmDbusService *object,
    GDBusMethodInvocation *invocation);

void realm_dbus_service_complete_release (
    RealmDbusService *object,
    GDBusMethodInvocation *invocation);



/* D-Bus signal emissions functions: */
void realm_dbus_service_emit_diagnostics (
    RealmDbusService *object,
    const gchar *arg_data,
    const gchar *arg_operation);



/* D-Bus method calls: */
void realm_dbus_service_call_cancel (
    RealmDbusService *proxy,
    const gchar *arg_operation,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean realm_dbus_service_call_cancel_finish (
    RealmDbusService *proxy,
    GAsyncResult *res,
    GError **error);

gboolean realm_dbus_service_call_cancel_sync (
    RealmDbusService *proxy,
    const gchar *arg_operation,
    GCancellable *cancellable,
    GError **error);

void realm_dbus_service_call_set_locale (
    RealmDbusService *proxy,
    const gchar *arg_locale,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean realm_dbus_service_call_set_locale_finish (
    RealmDbusService *proxy,
    GAsyncResult *res,
    GError **error);

gboolean realm_dbus_service_call_set_locale_sync (
    RealmDbusService *proxy,
    const gchar *arg_locale,
    GCancellable *cancellable,
    GError **error);

void realm_dbus_service_call_release (
    RealmDbusService *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean realm_dbus_service_call_release_finish (
    RealmDbusService *proxy,
    GAsyncResult *res,
    GError **error);

gboolean realm_dbus_service_call_release_sync (
    RealmDbusService *proxy,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define REALM_DBUS_TYPE_SERVICE_PROXY (realm_dbus_service_proxy_get_type ())
#define REALM_DBUS_SERVICE_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), REALM_DBUS_TYPE_SERVICE_PROXY, RealmDbusServiceProxy))
#define REALM_DBUS_SERVICE_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), REALM_DBUS_TYPE_SERVICE_PROXY, RealmDbusServiceProxyClass))
#define REALM_DBUS_SERVICE_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), REALM_DBUS_TYPE_SERVICE_PROXY, RealmDbusServiceProxyClass))
#define REALM_DBUS_IS_SERVICE_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), REALM_DBUS_TYPE_SERVICE_PROXY))
#define REALM_DBUS_IS_SERVICE_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), REALM_DBUS_TYPE_SERVICE_PROXY))

typedef struct _RealmDbusServiceProxy RealmDbusServiceProxy;
typedef struct _RealmDbusServiceProxyClass RealmDbusServiceProxyClass;
typedef struct _RealmDbusServiceProxyPrivate RealmDbusServiceProxyPrivate;

struct _RealmDbusServiceProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  RealmDbusServiceProxyPrivate *priv;
};

struct _RealmDbusServiceProxyClass
{
  GDBusProxyClass parent_class;
};

GType realm_dbus_service_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (RealmDbusServiceProxy, g_object_unref)
#endif

void realm_dbus_service_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
RealmDbusService *realm_dbus_service_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
RealmDbusService *realm_dbus_service_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void realm_dbus_service_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
RealmDbusService *realm_dbus_service_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
RealmDbusService *realm_dbus_service_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define REALM_DBUS_TYPE_SERVICE_SKELETON (realm_dbus_service_skeleton_get_type ())
#define REALM_DBUS_SERVICE_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), REALM_DBUS_TYPE_SERVICE_SKELETON, RealmDbusServiceSkeleton))
#define REALM_DBUS_SERVICE_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), REALM_DBUS_TYPE_SERVICE_SKELETON, RealmDbusServiceSkeletonClass))
#define REALM_DBUS_SERVICE_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), REALM_DBUS_TYPE_SERVICE_SKELETON, RealmDbusServiceSkeletonClass))
#define REALM_DBUS_IS_SERVICE_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), REALM_DBUS_TYPE_SERVICE_SKELETON))
#define REALM_DBUS_IS_SERVICE_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), REALM_DBUS_TYPE_SERVICE_SKELETON))

typedef struct _RealmDbusServiceSkeleton RealmDbusServiceSkeleton;
typedef struct _RealmDbusServiceSkeletonClass RealmDbusServiceSkeletonClass;
typedef struct _RealmDbusServiceSkeletonPrivate RealmDbusServiceSkeletonPrivate;

struct _RealmDbusServiceSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  RealmDbusServiceSkeletonPrivate *priv;
};

struct _RealmDbusServiceSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType realm_dbus_service_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (RealmDbusServiceSkeleton, g_object_unref)
#endif

RealmDbusService *realm_dbus_service_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.realmd.Realm */

#define REALM_DBUS_TYPE_REALM (realm_dbus_realm_get_type ())
#define REALM_DBUS_REALM(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), REALM_DBUS_TYPE_REALM, RealmDbusRealm))
#define REALM_DBUS_IS_REALM(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), REALM_DBUS_TYPE_REALM))
#define REALM_DBUS_REALM_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), REALM_DBUS_TYPE_REALM, RealmDbusRealmIface))

struct _RealmDbusRealm;
typedef struct _RealmDbusRealm RealmDbusRealm;
typedef struct _RealmDbusRealmIface RealmDbusRealmIface;

struct _RealmDbusRealmIface
{
  GTypeInterface parent_iface;


  gboolean (*handle_change_login_policy) (
    RealmDbusRealm *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_login_policy,
    const gchar *const *arg_permitted_add,
    const gchar *const *arg_permitted_remove,
    GVariant *arg_options);

  gboolean (*handle_deconfigure) (
    RealmDbusRealm *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_options);

  const gchar * (*get_configured) (RealmDbusRealm *object);

  GVariant * (*get_details) (RealmDbusRealm *object);

  const gchar *const * (*get_login_formats) (RealmDbusRealm *object);

  const gchar * (*get_login_policy) (RealmDbusRealm *object);

  const gchar * (*get_name) (RealmDbusRealm *object);

  const gchar *const * (*get_permitted_groups) (RealmDbusRealm *object);

  const gchar *const * (*get_permitted_logins) (RealmDbusRealm *object);

  const gchar *const * (*get_required_packages) (RealmDbusRealm *object);

  const gchar *const * (*get_supported_interfaces) (RealmDbusRealm *object);

};

GType realm_dbus_realm_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *realm_dbus_realm_interface_info (void);
guint realm_dbus_realm_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void realm_dbus_realm_complete_deconfigure (
    RealmDbusRealm *object,
    GDBusMethodInvocation *invocation);

void realm_dbus_realm_complete_change_login_policy (
    RealmDbusRealm *object,
    GDBusMethodInvocation *invocation);



/* D-Bus method calls: */
void realm_dbus_realm_call_deconfigure (
    RealmDbusRealm *proxy,
    GVariant *arg_options,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean realm_dbus_realm_call_deconfigure_finish (
    RealmDbusRealm *proxy,
    GAsyncResult *res,
    GError **error);

gboolean realm_dbus_realm_call_deconfigure_sync (
    RealmDbusRealm *proxy,
    GVariant *arg_options,
    GCancellable *cancellable,
    GError **error);

void realm_dbus_realm_call_change_login_policy (
    RealmDbusRealm *proxy,
    const gchar *arg_login_policy,
    const gchar *const *arg_permitted_add,
    const gchar *const *arg_permitted_remove,
    GVariant *arg_options,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean realm_dbus_realm_call_change_login_policy_finish (
    RealmDbusRealm *proxy,
    GAsyncResult *res,
    GError **error);

gboolean realm_dbus_realm_call_change_login_policy_sync (
    RealmDbusRealm *proxy,
    const gchar *arg_login_policy,
    const gchar *const *arg_permitted_add,
    const gchar *const *arg_permitted_remove,
    GVariant *arg_options,
    GCancellable *cancellable,
    GError **error);



/* D-Bus property accessors: */
const gchar *realm_dbus_realm_get_name (RealmDbusRealm *object);
gchar *realm_dbus_realm_dup_name (RealmDbusRealm *object);
void realm_dbus_realm_set_name (RealmDbusRealm *object, const gchar *value);

const gchar *realm_dbus_realm_get_configured (RealmDbusRealm *object);
gchar *realm_dbus_realm_dup_configured (RealmDbusRealm *object);
void realm_dbus_realm_set_configured (RealmDbusRealm *object, const gchar *value);

const gchar *const *realm_dbus_realm_get_supported_interfaces (RealmDbusRealm *object);
gchar **realm_dbus_realm_dup_supported_interfaces (RealmDbusRealm *object);
void realm_dbus_realm_set_supported_interfaces (RealmDbusRealm *object, const gchar *const *value);

GVariant *realm_dbus_realm_get_details (RealmDbusRealm *object);
GVariant *realm_dbus_realm_dup_details (RealmDbusRealm *object);
void realm_dbus_realm_set_details (RealmDbusRealm *object, GVariant *value);

const gchar *const *realm_dbus_realm_get_required_packages (RealmDbusRealm *object);
gchar **realm_dbus_realm_dup_required_packages (RealmDbusRealm *object);
void realm_dbus_realm_set_required_packages (RealmDbusRealm *object, const gchar *const *value);

const gchar *const *realm_dbus_realm_get_login_formats (RealmDbusRealm *object);
gchar **realm_dbus_realm_dup_login_formats (RealmDbusRealm *object);
void realm_dbus_realm_set_login_formats (RealmDbusRealm *object, const gchar *const *value);

const gchar *realm_dbus_realm_get_login_policy (RealmDbusRealm *object);
gchar *realm_dbus_realm_dup_login_policy (RealmDbusRealm *object);
void realm_dbus_realm_set_login_policy (RealmDbusRealm *object, const gchar *value);

const gchar *const *realm_dbus_realm_get_permitted_logins (RealmDbusRealm *object);
gchar **realm_dbus_realm_dup_permitted_logins (RealmDbusRealm *object);
void realm_dbus_realm_set_permitted_logins (RealmDbusRealm *object, const gchar *const *value);

const gchar *const *realm_dbus_realm_get_permitted_groups (RealmDbusRealm *object);
gchar **realm_dbus_realm_dup_permitted_groups (RealmDbusRealm *object);
void realm_dbus_realm_set_permitted_groups (RealmDbusRealm *object, const gchar *const *value);


/* ---- */

#define REALM_DBUS_TYPE_REALM_PROXY (realm_dbus_realm_proxy_get_type ())
#define REALM_DBUS_REALM_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), REALM_DBUS_TYPE_REALM_PROXY, RealmDbusRealmProxy))
#define REALM_DBUS_REALM_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), REALM_DBUS_TYPE_REALM_PROXY, RealmDbusRealmProxyClass))
#define REALM_DBUS_REALM_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), REALM_DBUS_TYPE_REALM_PROXY, RealmDbusRealmProxyClass))
#define REALM_DBUS_IS_REALM_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), REALM_DBUS_TYPE_REALM_PROXY))
#define REALM_DBUS_IS_REALM_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), REALM_DBUS_TYPE_REALM_PROXY))

typedef struct _RealmDbusRealmProxy RealmDbusRealmProxy;
typedef struct _RealmDbusRealmProxyClass RealmDbusRealmProxyClass;
typedef struct _RealmDbusRealmProxyPrivate RealmDbusRealmProxyPrivate;

struct _RealmDbusRealmProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  RealmDbusRealmProxyPrivate *priv;
};

struct _RealmDbusRealmProxyClass
{
  GDBusProxyClass parent_class;
};

GType realm_dbus_realm_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (RealmDbusRealmProxy, g_object_unref)
#endif

void realm_dbus_realm_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
RealmDbusRealm *realm_dbus_realm_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
RealmDbusRealm *realm_dbus_realm_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void realm_dbus_realm_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
RealmDbusRealm *realm_dbus_realm_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
RealmDbusRealm *realm_dbus_realm_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define REALM_DBUS_TYPE_REALM_SKELETON (realm_dbus_realm_skeleton_get_type ())
#define REALM_DBUS_REALM_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), REALM_DBUS_TYPE_REALM_SKELETON, RealmDbusRealmSkeleton))
#define REALM_DBUS_REALM_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), REALM_DBUS_TYPE_REALM_SKELETON, RealmDbusRealmSkeletonClass))
#define REALM_DBUS_REALM_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), REALM_DBUS_TYPE_REALM_SKELETON, RealmDbusRealmSkeletonClass))
#define REALM_DBUS_IS_REALM_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), REALM_DBUS_TYPE_REALM_SKELETON))
#define REALM_DBUS_IS_REALM_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), REALM_DBUS_TYPE_REALM_SKELETON))

typedef struct _RealmDbusRealmSkeleton RealmDbusRealmSkeleton;
typedef struct _RealmDbusRealmSkeletonClass RealmDbusRealmSkeletonClass;
typedef struct _RealmDbusRealmSkeletonPrivate RealmDbusRealmSkeletonPrivate;

struct _RealmDbusRealmSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  RealmDbusRealmSkeletonPrivate *priv;
};

struct _RealmDbusRealmSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType realm_dbus_realm_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (RealmDbusRealmSkeleton, g_object_unref)
#endif

RealmDbusRealm *realm_dbus_realm_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.realmd.Kerberos */

#define REALM_DBUS_TYPE_KERBEROS (realm_dbus_kerberos_get_type ())
#define REALM_DBUS_KERBEROS(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), REALM_DBUS_TYPE_KERBEROS, RealmDbusKerberos))
#define REALM_DBUS_IS_KERBEROS(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), REALM_DBUS_TYPE_KERBEROS))
#define REALM_DBUS_KERBEROS_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), REALM_DBUS_TYPE_KERBEROS, RealmDbusKerberosIface))

struct _RealmDbusKerberos;
typedef struct _RealmDbusKerberos RealmDbusKerberos;
typedef struct _RealmDbusKerberosIface RealmDbusKerberosIface;

struct _RealmDbusKerberosIface
{
  GTypeInterface parent_iface;

  const gchar * (*get_domain_name) (RealmDbusKerberos *object);

  const gchar * (*get_realm_name) (RealmDbusKerberos *object);

};

GType realm_dbus_kerberos_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *realm_dbus_kerberos_interface_info (void);
guint realm_dbus_kerberos_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus property accessors: */
const gchar *realm_dbus_kerberos_get_realm_name (RealmDbusKerberos *object);
gchar *realm_dbus_kerberos_dup_realm_name (RealmDbusKerberos *object);
void realm_dbus_kerberos_set_realm_name (RealmDbusKerberos *object, const gchar *value);

const gchar *realm_dbus_kerberos_get_domain_name (RealmDbusKerberos *object);
gchar *realm_dbus_kerberos_dup_domain_name (RealmDbusKerberos *object);
void realm_dbus_kerberos_set_domain_name (RealmDbusKerberos *object, const gchar *value);


/* ---- */

#define REALM_DBUS_TYPE_KERBEROS_PROXY (realm_dbus_kerberos_proxy_get_type ())
#define REALM_DBUS_KERBEROS_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), REALM_DBUS_TYPE_KERBEROS_PROXY, RealmDbusKerberosProxy))
#define REALM_DBUS_KERBEROS_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), REALM_DBUS_TYPE_KERBEROS_PROXY, RealmDbusKerberosProxyClass))
#define REALM_DBUS_KERBEROS_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), REALM_DBUS_TYPE_KERBEROS_PROXY, RealmDbusKerberosProxyClass))
#define REALM_DBUS_IS_KERBEROS_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), REALM_DBUS_TYPE_KERBEROS_PROXY))
#define REALM_DBUS_IS_KERBEROS_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), REALM_DBUS_TYPE_KERBEROS_PROXY))

typedef struct _RealmDbusKerberosProxy RealmDbusKerberosProxy;
typedef struct _RealmDbusKerberosProxyClass RealmDbusKerberosProxyClass;
typedef struct _RealmDbusKerberosProxyPrivate RealmDbusKerberosProxyPrivate;

struct _RealmDbusKerberosProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  RealmDbusKerberosProxyPrivate *priv;
};

struct _RealmDbusKerberosProxyClass
{
  GDBusProxyClass parent_class;
};

GType realm_dbus_kerberos_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (RealmDbusKerberosProxy, g_object_unref)
#endif

void realm_dbus_kerberos_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
RealmDbusKerberos *realm_dbus_kerberos_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
RealmDbusKerberos *realm_dbus_kerberos_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void realm_dbus_kerberos_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
RealmDbusKerberos *realm_dbus_kerberos_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
RealmDbusKerberos *realm_dbus_kerberos_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define REALM_DBUS_TYPE_KERBEROS_SKELETON (realm_dbus_kerberos_skeleton_get_type ())
#define REALM_DBUS_KERBEROS_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), REALM_DBUS_TYPE_KERBEROS_SKELETON, RealmDbusKerberosSkeleton))
#define REALM_DBUS_KERBEROS_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), REALM_DBUS_TYPE_KERBEROS_SKELETON, RealmDbusKerberosSkeletonClass))
#define REALM_DBUS_KERBEROS_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), REALM_DBUS_TYPE_KERBEROS_SKELETON, RealmDbusKerberosSkeletonClass))
#define REALM_DBUS_IS_KERBEROS_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), REALM_DBUS_TYPE_KERBEROS_SKELETON))
#define REALM_DBUS_IS_KERBEROS_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), REALM_DBUS_TYPE_KERBEROS_SKELETON))

typedef struct _RealmDbusKerberosSkeleton RealmDbusKerberosSkeleton;
typedef struct _RealmDbusKerberosSkeletonClass RealmDbusKerberosSkeletonClass;
typedef struct _RealmDbusKerberosSkeletonPrivate RealmDbusKerberosSkeletonPrivate;

struct _RealmDbusKerberosSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  RealmDbusKerberosSkeletonPrivate *priv;
};

struct _RealmDbusKerberosSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType realm_dbus_kerberos_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (RealmDbusKerberosSkeleton, g_object_unref)
#endif

RealmDbusKerberos *realm_dbus_kerberos_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.realmd.KerberosMembership */

#define REALM_DBUS_TYPE_KERBEROS_MEMBERSHIP (realm_dbus_kerberos_membership_get_type ())
#define REALM_DBUS_KERBEROS_MEMBERSHIP(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), REALM_DBUS_TYPE_KERBEROS_MEMBERSHIP, RealmDbusKerberosMembership))
#define REALM_DBUS_IS_KERBEROS_MEMBERSHIP(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), REALM_DBUS_TYPE_KERBEROS_MEMBERSHIP))
#define REALM_DBUS_KERBEROS_MEMBERSHIP_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), REALM_DBUS_TYPE_KERBEROS_MEMBERSHIP, RealmDbusKerberosMembershipIface))

struct _RealmDbusKerberosMembership;
typedef struct _RealmDbusKerberosMembership RealmDbusKerberosMembership;
typedef struct _RealmDbusKerberosMembershipIface RealmDbusKerberosMembershipIface;

struct _RealmDbusKerberosMembershipIface
{
  GTypeInterface parent_iface;


  gboolean (*handle_join) (
    RealmDbusKerberosMembership *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_credentials,
    GVariant *arg_options);

  gboolean (*handle_leave) (
    RealmDbusKerberosMembership *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_credentials,
    GVariant *arg_options);

  const gchar * (*get_suggested_administrator) (RealmDbusKerberosMembership *object);

  GVariant * (*get_supported_join_credentials) (RealmDbusKerberosMembership *object);

  GVariant * (*get_supported_leave_credentials) (RealmDbusKerberosMembership *object);

};

GType realm_dbus_kerberos_membership_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *realm_dbus_kerberos_membership_interface_info (void);
guint realm_dbus_kerberos_membership_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void realm_dbus_kerberos_membership_complete_join (
    RealmDbusKerberosMembership *object,
    GDBusMethodInvocation *invocation);

void realm_dbus_kerberos_membership_complete_leave (
    RealmDbusKerberosMembership *object,
    GDBusMethodInvocation *invocation);



/* D-Bus method calls: */
void realm_dbus_kerberos_membership_call_join (
    RealmDbusKerberosMembership *proxy,
    GVariant *arg_credentials,
    GVariant *arg_options,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean realm_dbus_kerberos_membership_call_join_finish (
    RealmDbusKerberosMembership *proxy,
    GAsyncResult *res,
    GError **error);

gboolean realm_dbus_kerberos_membership_call_join_sync (
    RealmDbusKerberosMembership *proxy,
    GVariant *arg_credentials,
    GVariant *arg_options,
    GCancellable *cancellable,
    GError **error);

void realm_dbus_kerberos_membership_call_leave (
    RealmDbusKerberosMembership *proxy,
    GVariant *arg_credentials,
    GVariant *arg_options,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean realm_dbus_kerberos_membership_call_leave_finish (
    RealmDbusKerberosMembership *proxy,
    GAsyncResult *res,
    GError **error);

gboolean realm_dbus_kerberos_membership_call_leave_sync (
    RealmDbusKerberosMembership *proxy,
    GVariant *arg_credentials,
    GVariant *arg_options,
    GCancellable *cancellable,
    GError **error);



/* D-Bus property accessors: */
const gchar *realm_dbus_kerberos_membership_get_suggested_administrator (RealmDbusKerberosMembership *object);
gchar *realm_dbus_kerberos_membership_dup_suggested_administrator (RealmDbusKerberosMembership *object);
void realm_dbus_kerberos_membership_set_suggested_administrator (RealmDbusKerberosMembership *object, const gchar *value);

GVariant *realm_dbus_kerberos_membership_get_supported_join_credentials (RealmDbusKerberosMembership *object);
GVariant *realm_dbus_kerberos_membership_dup_supported_join_credentials (RealmDbusKerberosMembership *object);
void realm_dbus_kerberos_membership_set_supported_join_credentials (RealmDbusKerberosMembership *object, GVariant *value);

GVariant *realm_dbus_kerberos_membership_get_supported_leave_credentials (RealmDbusKerberosMembership *object);
GVariant *realm_dbus_kerberos_membership_dup_supported_leave_credentials (RealmDbusKerberosMembership *object);
void realm_dbus_kerberos_membership_set_supported_leave_credentials (RealmDbusKerberosMembership *object, GVariant *value);


/* ---- */

#define REALM_DBUS_TYPE_KERBEROS_MEMBERSHIP_PROXY (realm_dbus_kerberos_membership_proxy_get_type ())
#define REALM_DBUS_KERBEROS_MEMBERSHIP_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), REALM_DBUS_TYPE_KERBEROS_MEMBERSHIP_PROXY, RealmDbusKerberosMembershipProxy))
#define REALM_DBUS_KERBEROS_MEMBERSHIP_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), REALM_DBUS_TYPE_KERBEROS_MEMBERSHIP_PROXY, RealmDbusKerberosMembershipProxyClass))
#define REALM_DBUS_KERBEROS_MEMBERSHIP_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), REALM_DBUS_TYPE_KERBEROS_MEMBERSHIP_PROXY, RealmDbusKerberosMembershipProxyClass))
#define REALM_DBUS_IS_KERBEROS_MEMBERSHIP_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), REALM_DBUS_TYPE_KERBEROS_MEMBERSHIP_PROXY))
#define REALM_DBUS_IS_KERBEROS_MEMBERSHIP_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), REALM_DBUS_TYPE_KERBEROS_MEMBERSHIP_PROXY))

typedef struct _RealmDbusKerberosMembershipProxy RealmDbusKerberosMembershipProxy;
typedef struct _RealmDbusKerberosMembershipProxyClass RealmDbusKerberosMembershipProxyClass;
typedef struct _RealmDbusKerberosMembershipProxyPrivate RealmDbusKerberosMembershipProxyPrivate;

struct _RealmDbusKerberosMembershipProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  RealmDbusKerberosMembershipProxyPrivate *priv;
};

struct _RealmDbusKerberosMembershipProxyClass
{
  GDBusProxyClass parent_class;
};

GType realm_dbus_kerberos_membership_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (RealmDbusKerberosMembershipProxy, g_object_unref)
#endif

void realm_dbus_kerberos_membership_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
RealmDbusKerberosMembership *realm_dbus_kerberos_membership_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
RealmDbusKerberosMembership *realm_dbus_kerberos_membership_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void realm_dbus_kerberos_membership_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
RealmDbusKerberosMembership *realm_dbus_kerberos_membership_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
RealmDbusKerberosMembership *realm_dbus_kerberos_membership_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define REALM_DBUS_TYPE_KERBEROS_MEMBERSHIP_SKELETON (realm_dbus_kerberos_membership_skeleton_get_type ())
#define REALM_DBUS_KERBEROS_MEMBERSHIP_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), REALM_DBUS_TYPE_KERBEROS_MEMBERSHIP_SKELETON, RealmDbusKerberosMembershipSkeleton))
#define REALM_DBUS_KERBEROS_MEMBERSHIP_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), REALM_DBUS_TYPE_KERBEROS_MEMBERSHIP_SKELETON, RealmDbusKerberosMembershipSkeletonClass))
#define REALM_DBUS_KERBEROS_MEMBERSHIP_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), REALM_DBUS_TYPE_KERBEROS_MEMBERSHIP_SKELETON, RealmDbusKerberosMembershipSkeletonClass))
#define REALM_DBUS_IS_KERBEROS_MEMBERSHIP_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), REALM_DBUS_TYPE_KERBEROS_MEMBERSHIP_SKELETON))
#define REALM_DBUS_IS_KERBEROS_MEMBERSHIP_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), REALM_DBUS_TYPE_KERBEROS_MEMBERSHIP_SKELETON))

typedef struct _RealmDbusKerberosMembershipSkeleton RealmDbusKerberosMembershipSkeleton;
typedef struct _RealmDbusKerberosMembershipSkeletonClass RealmDbusKerberosMembershipSkeletonClass;
typedef struct _RealmDbusKerberosMembershipSkeletonPrivate RealmDbusKerberosMembershipSkeletonPrivate;

struct _RealmDbusKerberosMembershipSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  RealmDbusKerberosMembershipSkeletonPrivate *priv;
};

struct _RealmDbusKerberosMembershipSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType realm_dbus_kerberos_membership_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (RealmDbusKerberosMembershipSkeleton, g_object_unref)
#endif

RealmDbusKerberosMembership *realm_dbus_kerberos_membership_skeleton_new (void);


G_END_DECLS

#endif /* __REALM_DBUS_GENERATED_H__ */
